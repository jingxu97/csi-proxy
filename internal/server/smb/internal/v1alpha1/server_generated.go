// Code generated by csi-proxy-api-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"

	"github.com/kubernetes-csi/csi-proxy/client/api/smb/v1alpha1"
	"github.com/kubernetes-csi/csi-proxy/client/apiversion"
	"github.com/kubernetes-csi/csi-proxy/internal/server/smb/internal"
	"google.golang.org/grpc"
)

var version = apiversion.NewVersionOrPanic("v1alpha1")

type versionedAPI struct {
	apiGroupServer internal.ServerInterface
}

func NewVersionedServer(apiGroupServer internal.ServerInterface) internal.VersionedAPI {
	return &versionedAPI{
		apiGroupServer: apiGroupServer,
	}
}

func (s *versionedAPI) Register(grpcServer *grpc.Server) {
	v1alpha1.RegisterSmbServer(grpcServer, s)
}

func (s *versionedAPI) MountSmbShare(context context.Context, versionedRequest *v1alpha1.MountSmbShareRequest) (*v1alpha1.MountSmbShareResponse, error) {
	request := &internal.MountSmbShareRequest{}
	if err := Convert_v1alpha1_MountSmbShareRequest_To_internal_MountSmbShareRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.MountSmbShare(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1alpha1.MountSmbShareResponse{}
	if err := Convert_internal_MountSmbShareResponse_To_v1alpha1_MountSmbShareResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) UnmountSmbShare(context context.Context, versionedRequest *v1alpha1.UnmountSmbShareRequest) (*v1alpha1.UnmountSmbShareResponse, error) {
	request := &internal.UnmountSmbShareRequest{}
	if err := Convert_v1alpha1_UnmountSmbShareRequest_To_internal_UnmountSmbShareRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.UnmountSmbShare(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1alpha1.UnmountSmbShareResponse{}
	if err := Convert_internal_UnmountSmbShareResponse_To_v1alpha1_UnmountSmbShareResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}
